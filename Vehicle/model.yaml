Vehicle:
  description: 'This entity models a particular vehicle model, including all properties which are common to multiple vehicle instances belonging to such model.'
  properties:
    address:
      description: 'The mailing address'
      properties:
        addressCountry:
          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''
          type: string
        addressLocality:
          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''
          type: string
        addressRegion:
          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''
          type: string
        postOfficeBoxNumber:
          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''
          type: string
        postalCode:
          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''
          type: string
        streetAddress:
          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''
          type: string
      type: Property
      x-ngsi:
        model: https://schema.org/address
    alternateName:
      description: 'An alternative name for this item'
      type: Property
    annotations:
      description: 'Annotations about the item'
      items:
        type: string
      type: Property
      x-ngsi:
        model: https://schema.org/Text
    areaServed:
      description: 'The geographic area where a service or offered item is provided'
      type: Property
      x-ngsi:
        model: https://schema.org/Text
    cargoWeight:
      description: 'Current weight of the vehicle''s cargo'
      exclusiveMinimum: 0
      type: Property
      x-ngsi:
        model: https://schema.org/Number
        units: Kilograms
    category:
      description: 'Vehicle category(ies) from an external point of view. This is different than the vehicle type (car, lorry, etc.) represented by the `vehicleType` property. Enum:''municipalServices, nonTracked, private, public, specialUsage, tracked''. Tracked vehicles are those vehicles which position is permanently tracked by a remote system. Or any other needed by an application They incorporate a GPS receiver together with a network connection to periodically update a reported position (location, speed, heading ...).'
      items:
        enum:
          - municipalServices
          - nonTracked
          - private
          - public
          - specialUsage
          - tracked
        type: string
      type: Property
      x-ngsi:
        model: https://schema.org/Text
    color:
      description: 'Vehicle''s color'
      type: Property
      x-ngsi:
        model: https://schema.org/color.
    dataProvider:
      description: 'A sequence of characters identifying the provider of the harmonised data entity.'
      type: Property
    dateCreated:
      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'
      format: date-time
      type: Property
    dateFirstUsed:
      description: 'Timestamp which denotes when the vehicle was first used'
      format: date
      type: Property
      x-ngsi:
        model: https://schema.org/DateTime.
    dateModified:
      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'
      format: date-time
      type: Property
    dateVehicleFirstRegistered:
      description: 'The date of the first registration of the vehicle with the respective public authorities'
      format: date
      type: Property
      x-ngsi:
        model: https://schema.org/dateVehicleFirstRegistered.
    description:
      description: 'A description of this item'
      type: Property
    feature:
      description: 'Feature(s) incorporated by the vehicle. Enum:'' abs, airbag, alarm, backCamera, disabledRamp, gps, internetConnection, overspeed, proximitySensor, wifi''. Or any other needed by the application. In order to represent multiple instances of a feature it can be used the following syntax: `<feature>,<occurences>`. For example, a car with 4 airbags will be represented by `airbag,4`.'
      items:
        enum:
          - abs
          - airbag
          - alarm
          - backCamera
          - disabledRamp
          - gps
          - internetConnection
          - overspeed
          - proximitySensor
          - wifi
        type: string
      type: Property
      x-ngsi:
        model: https://schema.org/Text
    fleetVehicleId:
      description: 'The identifier of the vehicle in the context of the fleet of vehicles to which it belongs'
      type: Property
      x-ngsi:
        model: https://schema.org/Text.
    heading:
      description: 'Denotes the direction of travel of the vehicle and is specified in decimal degrees, where 0 <= `heading` < 360, counting clockwise relative to the true north. If the vehicle is stationary (i.e. the value of the `speed` attribute is `0`), then the value of the heading attribute must be equal to `-1`'
      oneOf:
        - maximum: 360
          minimum: 0
          type: number
        - const: -1
          type: number
      type: Property
      x-ngsi:
        model: https://schema.org/Number
        units: 'Kilometer per hour (Km/h)'
    id:
      anyOf: &vehicle_-_properties_-_owner_-_items_-_anyof
        - description: 'Property. Identifier format of any NGSI entity'
          maxLength: 256
          minLength: 1
          pattern: ^[\w\-\.\{\}\$\+\*\[\]`|~^@!,:\\]+$
          type: string
        - description: 'Property. Identifier format of any NGSI entity'
          format: uri
          type: string
      description: 'Unique identifier of the entity'
      type: Property
    image:
      description: 'An image of the item'
      format: uri
      type: Property
      x-ngsi:
        model: https://schema.org/URL
    location:
      $id: https://geojson.org/schema/Geometry.json
      $schema: "http://json-schema.org/draft-07/schema#"
      oneOf: &vehicle_-_properties_-_previouslocation_-_oneof
        - properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                type: number
              minItems: 2
              type: array
            type:
              enum:
                - Point
              type: string
          required:
            - type
            - coordinates
          title: 'GeoJSON Point'
          type: object
        - properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                items:
                  type: number
                minItems: 2
                type: array
              minItems: 2
              type: array
            type:
              enum:
                - LineString
              type: string
          required:
            - type
            - coordinates
          title: 'GeoJSON LineString'
          type: object
        - properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                items:
                  items:
                    type: number
                  minItems: 2
                  type: array
                minItems: 4
                type: array
              type: array
            type:
              enum:
                - Polygon
              type: string
          required:
            - type
            - coordinates
          title: 'GeoJSON Polygon'
          type: object
        - properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                items:
                  type: number
                minItems: 2
                type: array
              type: array
            type:
              enum:
                - MultiPoint
              type: string
          required:
            - type
            - coordinates
          title: 'GeoJSON MultiPoint'
          type: object
        - properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                items:
                  items:
                    type: number
                  minItems: 2
                  type: array
                minItems: 2
                type: array
              type: array
            type:
              enum:
                - MultiLineString
              type: string
          required:
            - type
            - coordinates
          title: 'GeoJSON MultiLineString'
          type: object
        - properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                items:
                  items:
                    items:
                      type: number
                    minItems: 2
                    type: array
                  minItems: 4
                  type: array
                type: array
              type: array
            type:
              enum:
                - MultiPolygon
              type: string
          required:
            - type
            - coordinates
          title: 'GeoJSON MultiPolygon'
          type: object
      title: 'GeoJSON Geometry'
    mileageFromOdometer:
      description: 'The total distance travelled by the particular vehicle since its initial production, as read from its odometer'
      type: Property
      x-ngsi:
        model: https://schema.org/mileageFromOdometer.
    name:
      description: 'The name of this item.'
      type: Property
    owner:
      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'
      items:
        anyOf: *vehicle_-_properties_-_owner_-_items_-_anyof
        description: 'Property. Unique identifier of the entity'
      type: Property
    previousLocation:
      $id: https://geojson.org/schema/Geometry.json
      $schema: "http://json-schema.org/draft-07/schema#"
      oneOf: *vehicle_-_properties_-_previouslocation_-_oneof
      title: 'GeoJSON Geometry'
    purchaseDate:
      description: 'The date the item e.g. vehicle was purchased by the current owner'
      format: date-time
      type: Property
      x-ngsi:
        model: https://schema.org/purchaseDate.
    refVehicleModel:
      anyOf:
        - description: 'Property. Identifier format of any NGSI entity'
          maxLength: 256
          minLength: 1
          pattern: ^[\w\-\.\{\}\$\+\*\[\]`|~^@!,:\\]+$
          type: string
        - description: 'Property. Identifier format of any NGSI entity'
          format: uri
          type: string
      description: 'Reference to a VehicleModel'
      type: Relationship
      x-ngsi:
        model: https://schema.org/URL
    seeAlso:
      description: 'list of uri pointing to additional resources about the item'
      oneOf:
        - items:
            format: uri
            type: string
          minItems: 1
          type: array
        - format: uri
          type: string
      type: Property
    serviceProvided:
      description: 'Service(s) the vehicle is capable of providing or it is assigned to. Enum:''auxiliaryServices, cargoTransport, construction, fairground, garbageCollection, goodsSelling, maintenance, parksAndGardens, roadSignalling, specialTransport, streetCleaning, streetLighting, urbanTransit, wasteContainerCleaning''. Or any other value needed by an specific application.'
      items:
        enum:
          - auxiliaryServices
          - cargoTransport
          - construction
          - fairground
          - garbageCollection
          - goodsSelling
          - maintenance
          - parksAndGardens
          - roadSignalling
          - specialTransport
          - streetCleaning
          - streetLighting
          - urbanTransit
          - wasteContainerCleaning
        type: string
      type: Property
      x-ngsi:
        model: https://schema.org/Text
    serviceStatus:
      description: 'Vehicle status (from the point of view of the service provided, so it could not apply to private vehicles). `parked` : Vehicle is parked and not providing any service at the moment. `onRoute` : Vehicle is performing a mission. A comma-separated modifier(s) can be added to indicate what mission is currently delivering the vehicle. For instance `onRoute,garbageCollection` can be used to denote that the vehicle is on route and in a garbage collection mission. `broken` : Vehicle is suffering a temporary breakdown. `outOfService` : Vehicle is on the road but not performing any mission, probably going to its parking area. Enum:''broken, onRoute, outOfService, parked'''
      enum:
        - broken
        - onRoute
        - outOfService
        - parked
      type: Property
      x-ngsi:
        model: https://schema.org/DateTime
    source:
      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'
      type: Property
    speed:
      description: 'Denotes the magnitude of the horizontal component of the vehicle''s current velocity and is specified in Kilometers per Hour. If provided, the value of the speed attribute must be a non-negative real number. `-1` MAY be used if speed is transiently unknown for some reason'
      oneOf:
        - minimum: 0
          type: number
        - enum:
            - -1
          type: number
      type: Property
      x-ngsi:
        model: https://schema.org/Number
        units: 'Kilometer per hour (Km/h)'
    type:
      description: 'NGSI Entity type. It has to be Vehicle'
      enum:
        - Vehicle
      type: Property
    vehicleConfiguration:
      description: 'A short text indicating the configuration of the vehicle, e.g. ''5dr hatchback ST 2.5 MT 225 hp'' or ''limited edition'''
      type: Property
      x-ngsi:
        model: https://schema.org/vehicleConfiguration.
    vehicleIdentificationNumber:
      description: 'The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles'
      type: Property
      x-ngsi:
        model: https://schema.org/vehicleIdentificationNumber.
    vehiclePlateIdentifier:
      description: ' An identifier or code displayed on a vehicle registration plate attached to the vehicle used for official identification purposes. The registration identifier is numeric or alphanumeric and is unique within the issuing authority''s region. Normative References: DATEXII `vehicleRegistrationPlateIdentifier`'
      type: Property
      x-ngsi:
        model: https://schema.org/Text
    vehicleSpecialUsage:
      description: 'Indicates whether the vehicle is been used for special purposes, like commercial rental, driving school, or as a taxi. The legislation in many countries requires this information to be revealed when offering a car for sale. Enum:''ambulance, fireBrigade, military, police, schoolTransportation, taxi'''
      enum:
        - ambulance
        - fireBrigade
        - military
        - police
        - schoolTransportation
        - taxi
      type: Property
      x-ngsi:
        model: https://schema.org/vehicleSpecialUsage
    vehicleType:
      description: 'Type of vehicle from the point of view of its structural characteristics. This is different than the vehicle category . Enum:''agriculturalVehicle, anyVehicle, articulatedVehicle, bicycle, binTrolley, bus, car, caravan, carOrLightVehicle, carWithCaravan, carWithTrailer, cleaningTrolley, constructionOrMaintenanceVehicle, fourWheelDrive, highSidedVehicle, lorry, minibus, moped, motorcycle, motorcycleWithSideCar, motorscooter, sweepingMachine, tanker, threeWheeledVehicle, trailer, tram, twoWheeledVehicle, trolley, van, vehicleWithoutCatalyticConverter, vehicleWithCaravan, vehicleWithTrailer, withEvenNumberedRegistrationPlates, withOddNumberedRegistrationPlates, other''. The following values defined by _VehicleTypeEnum_ and _VehicleTypeEnum2_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/_static/umlmodel/v2.3/index.htm)'
      enum:
        - agriculturalVehicle
        - anyVehicle
        - articulatedVehicle
        - bicycle
        - binTrolley
        - bus
        - car
        - caravan
        - carOrLightVehicle
        - carWithCaravan
        - carWithTrailer
        - cleaningTrolley
        - constructionOrMaintenanceVehicle
        - fourWheelDrive
        - highSidedVehicle
        - lorry
        - minibus
        - moped
        - motorcycle
        - motorcycleWithSideCar
        - motorscooter
        - sweepingMachine
        - tanker
        - threeWheeledVehicle
        - trailer
        - tram
        - trolley
        - twoWheeledVehicle
        - van
        - vehicleWithoutCatalyticConverter
        - vehicleWithCaravan
        - vehicleWithTrailer
        - withEvenNumberedRegistrationPlates
        - withOddNumberedRegistrationPlates
        - other
      type: Property
      x-ngsi:
        model: https://schema.org/Text
  required:
    - id
    - type
    - vehicleType
    - category
    - location
  type: object
